{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConsoleLogger = exports.LogLevel = void 0;\n/**\n * Severity levels for log entries\n */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"ERROR\"] = \"error\";\n  LogLevel[\"WARN\"] = \"warn\";\n  LogLevel[\"INFO\"] = \"info\";\n  LogLevel[\"DEBUG\"] = \"debug\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n/**\n * Default logger which logs to stdout and stderr\n */\n\n\nclass ConsoleLogger {\n  constructor() {\n    this.level = LogLevel.INFO;\n    this.name = '';\n  }\n\n  getLevel() {\n    return this.level;\n  }\n  /**\n   * Sets the instance's log level so that only messages which are equal or more severe are output to the console.\n   */\n\n\n  setLevel(level) {\n    this.level = level;\n  }\n  /**\n   * Set the instance's name, which will appear on each log line before the message.\n   */\n\n\n  setName(name) {\n    this.name = name;\n  }\n  /**\n   * Log a debug message\n   */\n\n\n  debug() {\n    if (ConsoleLogger.isMoreOrEqualSevere(LogLevel.DEBUG, this.level)) {\n      for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n        msg[_key] = arguments[_key];\n      }\n\n      console.debug(ConsoleLogger.labels.get(LogLevel.DEBUG), this.name, ...msg);\n    }\n  }\n  /**\n   * Log an info message\n   */\n\n\n  info() {\n    if (ConsoleLogger.isMoreOrEqualSevere(LogLevel.INFO, this.level)) {\n      for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        msg[_key2] = arguments[_key2];\n      }\n\n      console.info(ConsoleLogger.labels.get(LogLevel.INFO), this.name, ...msg);\n    }\n  }\n  /**\n   * Log a warning message\n   */\n\n\n  warn() {\n    if (ConsoleLogger.isMoreOrEqualSevere(LogLevel.WARN, this.level)) {\n      for (var _len3 = arguments.length, msg = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        msg[_key3] = arguments[_key3];\n      }\n\n      console.warn(ConsoleLogger.labels.get(LogLevel.WARN), this.name, ...msg);\n    }\n  }\n  /**\n   * Log an error message\n   */\n\n\n  error() {\n    if (ConsoleLogger.isMoreOrEqualSevere(LogLevel.ERROR, this.level)) {\n      for (var _len4 = arguments.length, msg = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        msg[_key4] = arguments[_key4];\n      }\n\n      console.error(ConsoleLogger.labels.get(LogLevel.ERROR), this.name, ...msg);\n    }\n  }\n  /**\n   * Helper to compare two log levels and determine if a is equal or more severe than b\n   */\n\n\n  static isMoreOrEqualSevere(a, b) {\n    return ConsoleLogger.severity[a] >= ConsoleLogger.severity[b];\n  }\n\n}\n\nexports.ConsoleLogger = ConsoleLogger;\n/** Map of labels for each log level */\n\nConsoleLogger.labels = (() => {\n  const entries = Object.entries(LogLevel);\n  const map = entries.map(_ref => {\n    let [key, value] = _ref;\n    return [value, `[${key}] `];\n  });\n  return new Map(map);\n})();\n/** Map of severity as comparable numbers for each log level */\n\n\nConsoleLogger.severity = {\n  [LogLevel.ERROR]: 400,\n  [LogLevel.WARN]: 300,\n  [LogLevel.INFO]: 200,\n  [LogLevel.DEBUG]: 100\n};","map":{"version":3,"mappings":"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","names":["LogLevel","exports","ConsoleLogger","constructor","level","INFO","name","getLevel","setLevel","setName","debug","isMoreOrEqualSevere","DEBUG","msg","console","labels","get","info","warn","WARN","error","ERROR","a","b","severity","entries","Object","map","key","value","Map"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}