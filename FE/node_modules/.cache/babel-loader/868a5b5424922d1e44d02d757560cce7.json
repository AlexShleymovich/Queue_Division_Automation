{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rateLimitedErrorWithDelay = exports.platformErrorFromResult = exports.httpErrorFromResponse = exports.requestErrorWithOriginal = exports.ErrorCode = void 0;\n/**\n * A dictionary of codes for errors produced by this package\n */\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[\"RequestError\"] = \"slack_webapi_request_error\";\n  ErrorCode[\"HTTPError\"] = \"slack_webapi_http_error\";\n  ErrorCode[\"PlatformError\"] = \"slack_webapi_platform_error\";\n  ErrorCode[\"RateLimitedError\"] = \"slack_webapi_rate_limited_error\";\n})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));\n/**\n * Factory for producing a {@link CodedError} from a generic error\n */\n\n\nfunction errorWithCode(error, code) {\n  // NOTE: might be able to return something more specific than a CodedError with conditional typing\n  const codedError = error;\n  codedError.code = code;\n  return codedError;\n}\n/**\n * A factory to create WebAPIRequestError objects\n * @param original - original error\n */\n\n\nfunction requestErrorWithOriginal(original) {\n  const error = errorWithCode(new Error(`A request error occurred: ${original.message}`), ErrorCode.RequestError);\n  error.original = original;\n  return error;\n}\n\nexports.requestErrorWithOriginal = requestErrorWithOriginal;\n/**\n * A factory to create WebAPIHTTPError objects\n * @param response - original error\n */\n\nfunction httpErrorFromResponse(response) {\n  const error = errorWithCode(new Error(`An HTTP protocol error occurred: statusCode = ${response.status}`), ErrorCode.HTTPError);\n  error.statusCode = response.status;\n  error.statusMessage = response.statusText;\n  error.headers = response.headers;\n  error.body = response.data;\n  return error;\n}\n\nexports.httpErrorFromResponse = httpErrorFromResponse;\n/**\n * A factory to create WebAPIPlatformError objects\n * @param result - Web API call result\n */\n\nfunction platformErrorFromResult(result) {\n  const error = errorWithCode(new Error(`An API error occurred: ${result.error}`), ErrorCode.PlatformError);\n  error.data = result;\n  return error;\n}\n\nexports.platformErrorFromResult = platformErrorFromResult;\n/**\n * A factory to create WebAPIRateLimitedError objects\n * @param retrySec - Number of seconds that the request can be retried in\n */\n\nfunction rateLimitedErrorWithDelay(retrySec) {\n  const error = errorWithCode(new Error(`A rate-limit has been reached, you may retry this request in ${retrySec} seconds`), ErrorCode.RateLimitedError);\n  error.retryAfter = retrySec;\n  return error;\n}\n\nexports.rateLimitedErrorWithDelay = rateLimitedErrorWithDelay;","map":{"version":3,"mappings":";;;;;;AAWA;;;;AAGA,IAAYA,SAAZ;;AAAA,WAAYA,SAAZ,EAAqB;EACnBA;EACAA;EACAA;EACAA;AACD,CALD,EAAYA,SAAS,GAATC,0CAAS,EAAT,CAAZ;AAmCA;;;;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAAqCC,IAArC,EAAoD;EAClD;EACA,MAAMC,UAAU,GAAGF,KAAnB;EACAE,UAAU,CAACD,IAAX,GAAkBA,IAAlB;EACA,OAAOC,UAAP;AACD;AAED;;;;;;AAIA,SAAgBC,wBAAhB,CAAyCC,QAAzC,EAAwD;EACtD,MAAMJ,KAAK,GAAGD,aAAa,CACzB,IAAIM,KAAJ,CAAU,6BAA6BD,QAAQ,CAACE,OAAO,EAAvD,CADyB,EAEzBT,SAAS,CAACU,YAFe,CAA3B;EAIAP,KAAK,CAACI,QAAN,GAAiBA,QAAjB;EACA,OAAQJ,KAAR;AACD;;AAPDF;AASA;;;;;AAIA,SAAgBU,qBAAhB,CAAsCC,QAAtC,EAA6D;EAC3D,MAAMT,KAAK,GAAGD,aAAa,CACzB,IAAIM,KAAJ,CAAU,iDAAiDI,QAAQ,CAACC,MAAM,EAA1E,CADyB,EAEzBb,SAAS,CAACc,SAFe,CAA3B;EAIAX,KAAK,CAACY,UAAN,GAAmBH,QAAQ,CAACC,MAA5B;EACAV,KAAK,CAACa,aAAN,GAAsBJ,QAAQ,CAACK,UAA/B;EACAd,KAAK,CAACe,OAAN,GAAgBN,QAAQ,CAACM,OAAzB;EACAf,KAAK,CAACgB,IAAN,GAAaP,QAAQ,CAACQ,IAAtB;EACA,OAAQjB,KAAR;AACD;;AAVDF;AAYA;;;;;AAIA,SAAgBoB,uBAAhB,CAAwCC,MAAxC,EAAqF;EACnF,MAAMnB,KAAK,GAAGD,aAAa,CACzB,IAAIM,KAAJ,CAAU,0BAA0Bc,MAAM,CAACnB,KAAK,EAAhD,CADyB,EAEzBH,SAAS,CAACuB,aAFe,CAA3B;EAIApB,KAAK,CAACiB,IAAN,GAAaE,MAAb;EACA,OAAQnB,KAAR;AACD;;AAPDF;AASA;;;;;AAIA,SAAgBuB,yBAAhB,CAA0CC,QAA1C,EAA0D;EACxD,MAAMtB,KAAK,GAAGD,aAAa,CACzB,IAAIM,KAAJ,CAAU,gEAAgEiB,QAAQ,UAAlF,CADyB,EAEzBzB,SAAS,CAAC0B,gBAFe,CAA3B;EAIAvB,KAAK,CAACwB,UAAN,GAAmBF,QAAnB;EACA,OAAQtB,KAAR;AACD;;AAPDF","names":["ErrorCode","exports","errorWithCode","error","code","codedError","requestErrorWithOriginal","original","Error","message","RequestError","httpErrorFromResponse","response","status","HTTPError","statusCode","statusMessage","statusText","headers","body","data","platformErrorFromResult","result","PlatformError","rateLimitedErrorWithDelay","retrySec","RateLimitedError","retryAfter"],"sourceRoot":"","sources":["../src/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}